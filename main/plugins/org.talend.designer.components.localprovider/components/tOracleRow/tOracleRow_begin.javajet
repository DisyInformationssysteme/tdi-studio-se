<%@ jet
imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
"
%>
<%@ include file="../templates/DB/Row/HelpClass.javajet"%>

<%
//TPS-3315
org.talend.designer.codegen.config.CodeGeneratorArgument codeGenArgument_pwdCheck = (org.talend.designer.codegen.config.CodeGeneratorArgument)argument;
org.talend.core.model.process.INode node_pwdCheck = (org.talend.core.model.process.INode)codeGenArgument_pwdCheck.getArgument();
boolean useExistingConnection_pwdCheck = "true".equalsIgnoreCase(ElementParameterParser.getValue(node_pwdCheck,"__USE_EXISTING_CONNECTION__"));
if(!useExistingConnection_pwdCheck) {
String user_pwdCheck = ElementParameterParser.getValue(node_pwdCheck, "__USER__");
String dbhost_pwdCheck = ElementParameterParser.getValue(node_pwdCheck, "__HOST__");
String dbport_pwdCheck = ElementParameterParser.getValue(node_pwdCheck, "__PORT__");
String dbname_pwdCheck = ElementParameterParser.getValue(node_pwdCheck, "__DBNAME__");
String dbproperties_pwdCheck = ElementParameterParser.getValue(node_pwdCheck, "__PROPERTIES__");
String localServiceName_pwdCheck = ElementParameterParser.getValue(node_pwdCheck, "__LOCAL_SERVICE_NAME__");
final class ValueChecker {
    	
   	public boolean checkValueForPassword(String inputValue, org.talend.core.model.process.IContext context) {
		if(null == inputValue) {
			return false;
		}
		java.util.List<String> parsed = new java.util.ArrayList<String>();
		String value = inputValue.trim();
		while(org.talend.core.model.utils.ContextParameterUtils.containContextVariables(value)) {
			String nonQuoteStr = org.talend.core.utils.TalendQuoteUtils.filterQuote(value);
			String contextVar = org.talend.core.model.utils.ContextParameterUtils.getVariableFromCode(nonQuoteStr);
			parsed.add(contextVar);
			String curValue = org.talend.core.model.utils.ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX + contextVar;
			int index = value.indexOf(curValue);
			if(index != -1) {
				value = value.substring(index + curValue.length(), value.length());
			}
		}
		for(String parsedParam : parsed) {
			org.talend.core.model.process.IContextParameter param = context.getContextParameter(parsedParam);
			if(org.talend.core.model.utils.ContextParameterUtils.isPasswordType(param)) {
				return true;
			}
		}
		return false;
	}
    	
}
ValueChecker checker = new ValueChecker();
org.talend.core.model.process.IContext context_pwdCheck = node_pwdCheck.getProcess().getContextManager().getDefaultContext();
if(checker.checkValueForPassword(dbhost_pwdCheck, context_pwdCheck) || checker.checkValueForPassword(dbport_pwdCheck, context_pwdCheck) || checker.checkValueForPassword(dbname_pwdCheck, context_pwdCheck) || checker.checkValueForPassword(dbproperties_pwdCheck, context_pwdCheck) || checker.checkValueForPassword(localServiceName_pwdCheck, context_pwdCheck)) {
	%>
	if(true) {
		throw new RuntimeException("Password context variable is used in plain text field!");
	}
	<%
}
}
//
	class DBRowBeginUtil extends DefaultDBRowUtil{

		public void beforeComponentProcess(INode node){
			super.beforeComponentProcess(node);
			cid = node.getUniqueName();
	    }

		public void setURL(INode node) {
			String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__");
			String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
			String jdbcURL = ElementParameterParser.getValue(node, "__JDBC_URL__");
			String rac_url = ElementParameterParser.getValue(node, "__RAC_URL__");
%>
			String url_<%=cid%> = null;
<%
			if("ORACLE_RAC".equals(connectionType)) {
%>
				url_<%=cid %> = <%=rac_url%>;
<%
			} else if(("ORACLE_SID").equals(connectionType)) {
%>
				url_<%=cid %> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
<%
			} else if(("ORACLE_SERVICE_NAME").equals(connectionType)) {
%>
				url_<%=cid %> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
<%
			} else if(("ORACLE_OCI").equals(connectionType)) {
%>
				url_<%=cid %> = "jdbc:oracle:oci8:@" + <%=localServiceName%>;
<%
			}else if(("ORACLE_WALLET").equals(connectionType)) {
%>
	    			url_<%=cid%> = <%=jdbcURL%>;
<%
			}
		}

		public void newConnection(){
			if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
				super.newConnection();
			} else {
			%>
				java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
				atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
				atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
	            if(<%= dbproperties %> != null && !"\"\"".equals(<%= dbproperties %>) && !"".equals(<%= dbproperties %>)){
                    atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(<%=dbproperties%>.replace("&", "\n").getBytes()));
                }
				conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
			<%
			}
		}

		public String getDirverClassName(INode node){
			String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
			if("ORACLE_11".equals(dbVersion) || "ORACLE_12".equals(dbVersion) || "ORACLE_18".equals(dbVersion)){
			    return "oracle.jdbc.OracleDriver";
			}else {
				return "oracle.jdbc.driver.OracleDriver";
			}
		}

		public void afterConnection(INode node){
			String use_NB_Line = ElementParameterParser.getValue(node, "__USE_NB_LINE__");
			//feature 0010425
			if ("NB_LINE_INSERTED".equals(use_NB_Line)) {
			%>
				int nb_line_inserted_<%=cid%> = 0;
			<%
			} else if ("NB_LINE_UPDATED".equals(use_NB_Line)) {
			%>
				int nb_line_update_<%=cid%> = 0;
			<%
			} else if ("NB_LINE_DELETED".equals(use_NB_Line)) {
			%>
				int nb_line_deleted_<%=cid%> = 0;
			<%
			}//end feature 0010425
		}
	}
	dbRowBeginUtil = new DBRowBeginUtil();
%>
<%@ include file="../templates/DB/Row/AbstractDBRowBegin.javajet"%>
